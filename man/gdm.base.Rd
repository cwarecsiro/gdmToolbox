% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gdm-base.R
\name{gdm.base}
\alias{gdm.base}
\title{gdm model fit with base R glm}
\usage{
gdm.base(data, link = "negexp", optim.method = "nnls.fit", geo = FALSE,
  geo.method = "euclidean", splines = 3, quantiles = NULL,
  control = glm.control(), output = "glm")
}
\arguments{
\item{data}{(data.frame) gdm site pair table of the format returned by \code{\link{formatsitepair}}.}

\item{link}{(character or function) link function. default is 'negexp' (e.g., Ferrier etal., 2007), can call other
link functions \code{\link[stats]{make.link}} or custom link function.}

\item{geo}{(boolean) Whether or not geographic distance should be included in the model}

\item{geo.method}{(character) measure to use to calculate geographic distance. Currently supports 'euclidean' or 'vincenty' (requires SDMTools)}

\item{splines}{(vector) number of splines to transform model predictors. If splines has length of one, then the same number of splines is applied to each predictor.
Else, the length of splines must equal the number of predictors (as per the splines parameter in \code{\link{gdm}}).}

\item{quantiles}{(vector) as per knots parameter in \code{\link{gdm}}.}

\item{control}{model options to pass to glm.control(). Default glm.control().}

\item{output}{(character) output format. Options are one of 'glm' (default) or 'gdm.' If 'glm' model summary is that returned by the \code{\link{glm}}.
If 'trad' model summary is in the format returned by \code{\link{gdm}}.}

\item{optim.meth}{(character or function) optimisation method (default nnls).}
}
\value{
gdm model fit as either glm object (default) of if output = 'gdm', returns 'traditional' output object.
}
\description{
function for fitting a gdm model. The function differs to the \code{\link{gdm}} function
only in that it uses the base R glm function to construct and fit the model rather than using the existing 
C code. The advantages of fitting a gdm in this way may be limited for some use cases, and will likely incur a 
performance (speed) penalty. For other use cases, however, fitting a model using the glm framework provides a flexible
way of model fitting not possible using the existing C code (in which model options were hard-coded). As with 
\code{\link[stats]{glm.fit}}, gdm.base allows the specification of different link functions, 
families, opimizers, likelihood functions, and spline functions (possibly... to come...), in addition to 
providing a potentially more useful (or at least familiar) summary output.
}
\note{
The present implementation differs in some key ways to the \code{\link{gdm}} function (e.g. different coefficients). 
The reason for this is not yet clear, but needs understanding before releasing the function into the wild... 
Also haven't included a weights arg into the model fit (yet).
Also also, documentation for the supporting functions is still to come...
Also also also, the functions here are probably best split over a few .R file, but are bundled for now.
}
\examples{
## create input table using gdm example  
load(system.file("./data/gdm.RData", package = 'gdm'))
sppData <- gdmExpData[, c(1,2,13,14)]
envTab <- gdmExpData[, c(2:ncol(gdmExpData))]
testData1a = reshape2::dcast(sppData, site~species)
coords <- unique(sppData[, 2:ncol(sppData)])
testData1b <- merge(testData1a, coords, by="site"))
exFormat1a <- suppressWarnings(formatsitepair(testData1a, 1, 
                                               siteColumn="site", 
                                               XColumn="Long", 
                                               YColumn="Lat",
                                               predData=envTab))
## rm categorical (?) variable
data = exFormat1a[, -c(grep('bio18', names(exFormat1a)))]
## fit the model
fitgdm = gdm.base(data, geo = TRUE, geo.method = 'vincenty', output = 'glm')

}
\author{
Andrew Hoskins, Skipton Woolley, Chris Ware
}
